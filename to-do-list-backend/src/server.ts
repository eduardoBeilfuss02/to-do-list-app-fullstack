// Arquivo de entrada do servidor Express
// Este arquivo configura o servidor Express, importa as rotas e inicia o servidor na porta especificada
// Ele tambÃ©m configura o middleware para analisar JSON e habilita CORS para permitir requisiÃ§Ãµes de diferentes origens

import dotenv from 'dotenv';
dotenv.config(); // Esta linha carrega as variÃ¡veis do .env para a aplicaÃ§Ã£o
import express from 'express';
import authRoutes from './routes/auth.routes'; // 1. Importe as rotas
import tarefasRoutes from './routes/tarefas.routes'; // Importa as rotas de tarefas
import notificacoesRoutes from './routes/notificacoes.routes'; // Importa as rotas de notificaÃ§Ãµes
import cors from 'cors';


// Cria uma instÃ¢ncia do servidor Express
// Configura o servidor para usar JSON e habilita CORS
const app = express();
app.use(express.json());
app.use(cors());

// 2. Use as rotas de autenticaÃ§Ã£o com um prefixo
// Todas as rotas dentro de 'authRoutes' agora comeÃ§arÃ£o com '/api/'
app.use('/api/auth', authRoutes);
app.use('/api/tasks', tarefasRoutes);
app.use('/api/notifications', notificacoesRoutes);

// Inicia o servidor na porta especificada
// O servidor escuta na porta 3000 e exibe uma mensagem no console quando estÃ¡ rodando
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`ğŸš€ Servidor rodando na porta ${PORT}`);
});

// Rota raiz para verificar se a API estÃ¡ funcionando
// Esta rota responde com uma mensagem simples quando acessada
app.get('/', (req, res) => {
  res.send('A API da To-Do List estÃ¡ no ar!');
});